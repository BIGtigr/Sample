# SJS. Started 3/15/14.

# 3/17/14: rewritten for cluster. 
# Conduct 100 simulations each for varying kappa and omega. For varying omega, kappa constant, and vice versa.
# Tree has 200 taxa. Same state frequencies for all. 


import os
import re
import sys
import shutil
import subprocess
import numpy as np


# Use this line on my computer only, not on the cluster!
#sys.path.append("/Users/sjspielman/Research/MutSel/Simulator/src/")

from misc import *
from newick import *
from stateFreqs import *
from matrixBuilder import *
from evolver import *


#################################################################################################################################
def ensure_dir(dir):
    if not os.path.exists(dir):
        os.mkdir(dir)
#################################################################################################################################


#################################################################################################################################
def getTree(tree_file):
	tree = open(tree_file, 'rU')
	tree_string = tree.read()
	tree.close()
	tree_string = tree_string.rstrip()
	return tree_string
#################################################################################################################################


#################################################################################################################################
def buildSingleModel(freqs, kappa, omega, size):
	partitions = []
	model = misc.Model()
	model.params = { "kappa": kappa, "omega": omega, "stateFreqs": freqs }
	m = GY94(model)
	model.Q = m.buildQ()
	partitions.append( (size, model) )
	return partitions
#################################################################################################################################


#################################################################################################################################
def callSim(partitions, my_tree, seqfile):

	print "evolving"
	myEvolver = StaticEvolver(partitions = partitions, tree = my_tree, outfile = seqfile)
	myEvolver.sim_sub_tree(my_tree)
	myEvolver.writeSequences()
#################################################################################################################################


#################################################################################################################################
def prepHyPhy(alnfile, tree):
	aln = open(alnfile, 'r')
	alnlines = aln.read()
	aln.close()
	hyin = open('temp.fasta', 'w')
	hyin.write(alnlines+'\n'+tree)
	hyin.close()	
#################################################################################################################################


#################################################################################################################################
def runHyPhy(hyphy_exec, param):

	if param == 'omega':
		param = 'w'
	elif param == 'kappa':
		param = 'k'

	outfile = "hyout.txt"
	callHyphy = hyphy_exec+" run.bf > "+outfile
	print "running hyphy as called:",callHyphy
	check = subprocess.call(callHyphy, shell=True)
	assert (check==0), "HyPhy didn't run properly."
	
	# Parse hyphy output
	file = open(outfile, 'rU')
	hyout=file.readlines()
	file.close()
	for line in hyout:
		find = re.search("^"+param+"=(\d+\.*\d*)$", line)
		if find:
			final_param = float(find.group(1))
			break
	return final_param
#################################################################################################################################
	
	
	
	
############################################### PARAMETERS, 3/17/14.  ###########################################################
kappas = np.linspace(2.50, 6.50, num = 100)
omegas = np.linspace(0.05, 1.10, num = 100)
omega_fixed = 0.5
kappa_fixed = 5.5

# this is from 200.tre
tree_string = "(((t47:0.03248796612,(((t163:0.8158572859,(((t5:0.0216498943,t38:0.2726888114):0.2141554104,t188:0.049722475):0.5587567869,((t87:0.584093163,t181:0.5298331638):0.302730459,t183:0.8415169995):0.9421704919):0.3012000273):0.7478876202,((t165:0.9176310261,(t164:0.112989831,t44:0.299383153):0.9791319584):0.6111174789,(t130:0.02696349309,t92:0.2977160017):0.3723928239):0.8288879651):0.6376896522,((t49:0.04473436577,((t199:0.9910588609,(((t54:0.2554615494,t195:0.03085291386):0.2186313143,t114:0.5532411612):0.07624032465,t69:0.0499742236):0.6882461559):0.1764927285,(t150:0.3775201559,t37:0.9456318596):0.2744967453):0.8317483859):0.6869684192,(t147:0.7670328005,t132:0.8173019434):0.5066695884):0.7225330728):0.2118297657):0.06560593494,((((((t53:0.1733091767,(t79:0.2872869414,((t98:0.1991927766,t80:0.8133639221):0.6240474675,t10:0.8548690549):0.6306394155):0.6682210383):0.2276826452,((t129:0.04218281806,(t123:0.1852472299,(t118:0.4670250074,t97:0.4805240459):0.8047976324):0.2061856219):0.3120425183,(t82:0.1221644497,((t21:0.2836751894,t39:0.9771599136):0.1497766566,t34:0.4394380006):0.05081087234):0.5056767573):0.6974881692):0.9141461772,(((((((t109:0.9930173024,t182:0.4779521059):0.614393668,t94:0.5213770578):0.09655805491,t175:0.9230523151):0.3303266531,t6:0.1495418032):0.4308158741,(((t122:0.3754360937,t172:0.5696703361):0.3998797191,(t12:0.1986681363,(t154:0.3122193916,t186:0.8795898957):0.3858837895):0.4933908253):0.3349717546,t71:0.5746922852):0.9821351513):0.9466012744,(((t160:0.3384449214,(t70:0.6545897322,t67:0.1789069772):0.1520482206):0.5707658073,(t14:0.2801036863,(((t17:0.9934167785,t26:0.9527935227):0.6873752587,t155:0.9175440404):0.3561737898,(t103:0.7322222332,t64:0.4814827514):0.3894540423):0.07399320067):0.2773767065):0.3774642914,t110:0.9010279069):0.2500277662):0.4854962935,(t197:0.902830286,(((t40:0.2048031983,t179:0.0981370369):0.9569181362,((t115:0.9244047992,(t133:0.7141227585,t112:0.3435482353):0.2721726848):0.8922650809,((t120:0.2808197611,(t196:0.8799784041,t65:0.1051232964):0.4955397251):0.4500874532,t91:0.5220964397):0.03170564561):0.6101651541):0.8145393045,t30:0.006937407423):0.5057468091):0.2350355624):0.8995697377):0.4681614856,((((t108:0.9299565076,t158:0.5554625215):0.03058915073,((t1:0.9319302228,t4:0.8458294424):0.06573096174,t152:0.03256913694):0.483894143):0.9304444373,t22:0.4958164915):0.7884207666,(((t58:0.6923393812,t151:0.2108165168):0.0903119999,(t134:0.5048837126,t168:0.2842593838):0.3177904191):0.09263472189,t174:0.5440315984):0.7814379404):0.3744530319):0.7530866845,(((((t136:0.04511945532,t78:0.7224523514):0.4450681712,t148:0.02793984022):0.5283715804,(t100:0.1603833064,t72:0.3969968958):0.4003169388):0.2604079489,(t36:0.4067776643,(t68:0.8066611337,t146:0.2017148992):0.07970417547):0.2616938851):0.3701888493,(((t192:0.915851977,(t111:0.1438933318,t171:0.328495387):0.3816064666):0.4248667497,t55:0.508215582):0.5541534647,t194:0.4708843217):0.8441291398):0.09249355551):0.2911434476,(((t138:0.8041084711,((t200:0.7734672858,((t3:0.3167918085,t135:0.92092639):0.2454573035,(t81:0.1107587728,t166:0.121804812):0.4180441634):0.2792099286):0.907139665,(t90:0.006054482656,t125:0.3499832524):0.4847102573):0.712846396):0.9655204322,(((t62:0.08011889411,((t119:0.4470217533,t142:0.1342869345):0.2917564667,(t32:0.433538659,t77:0.7115823186):0.3491323444):0.9005855685):0.6069669465,t124:0.3296421282):0.7166514462,(t107:0.02903463738,(t24:0.3646019872,(t50:0.612008662,t41:0.9481737916):0.4067191859):0.3373952932):0.4198962266):0.6327178485):0.8888703173,((((((t52:0.2163621571,(((t57:0.4504206721,t159:0.815053981):0.7631990865,t15:0.4824940527):0.6123072251,(t170:0.6775976012,t143:0.7204656103):0.5079169702):0.7670959397):0.9717994102,t29:0.3753647783):0.1499212473,(t43:0.9318881992,t89:0.4952567539):0.2017719995):0.185327993,((((t7:0.5776910239,t74:0.8147879865):0.6577167476,(t31:0.7515908217,t33:0.8767769639):0.5320338807):0.5561277142,((t177:0.5367674532,t16:0.327265779):0.2436204762,t169:0.9931793206):0.3134259463):0.2794055541,((t56:0.7824013019,t185:0.7993859197):0.03334646532,(t180:0.5232942109,t157:0.7390832582):0.02619841788):0.3921844447):0.8354856588):0.1779047383,((((t178:0.5977574845,t104:0.6020209638):0.008959826315,(t126:0.8174259958,t141:0.1455165329):0.9303447783):0.5638281903,((((t156:0.8157916204,t128:0.5688068264):0.6393073706,(t153:0.5792187101,t193:0.9427782912):0.8763900273):0.1887681752,(((t161:0.6788983268,t101:0.04967199173):0.4837876216,t149:0.5022515187):0.5930011666,(t18:0.5925671202,t139:0.9098114721):0.3474321074):0.1625791697):0.353267574,((t60:0.1475408073,t73:0.3245459709):0.8447342571,(t105:0.8400681948,(t51:0.4593914177,(t28:6.452086382e-05,t48:0.3400846352):0.8288531641):0.2081539964):0.647551568):0.5358000691):0.9101616014):0.2637067856,(((t83:0.7879514322,t45:0.568531113):0.04729344207,t2:0.688498056):0.729477539,t59:0.4533084745):0.1434413018):0.0822372532):0.839487589,(((t190:0.8303410774,((t198:0.8445128303,t145:0.3476000128):0.76586484,(t63:0.6356784338,t9:0.2406275186):0.3383230653):0.6391781748):0.08994472004,t137:0.007834407734):0.284983757,(t84:0.6591782849,t23:0.09551431774):0.1694198402):0.6332795776):0.5020333074):0.2372365771):0.5263382657):0.3661413549,(((((t102:0.6593404845,((t35:0.1920124621,t46:0.5310901252):0.9386942103,t66:0.3065088009):0.4369409424):0.7777278421,t127:0.08917284361):0.3631300011,((t184:0.6236157478,t99:0.4590415999):0.9279110704,((t191:0.9825420168,((t140:0.3377700641,t117:0.6109918584):0.2736564421,((((t189:0.6022664206,(t8:0.3262261755,t88:0.7845699491):0.5047646556):0.4167748473,(t167:0.4822595974,t144:0.6671423847):0.9081852126):0.250308682,t96:0.02099913475):0.3362996154,(t187:0.08597594779,t85:0.4313574913):0.6471197726):0.5296643209):0.1044645256):0.8883887648,t131:0.9441500315):0.2305717769):0.08972821012):0.6328944874,((t25:0.552030937,t13:0.2102549248):0.8726838827,((t176:0.4983847314,(((((((t19:0.5738314888,t86:0.2190717638):0.2483877388,((t93:0.03450103407,t75:0.3313585655):0.1508713991,t106:0.4210505334):0.1961480859):0.9135961873,(t76:0.4948479515,t95:0.7534797243):0.6578692812):0.4434605883,t121:0.5763405904):0.8126923346,t113:0.3888648211):0.3300480882,t61:0.5926664667):0.0252550384,((t20:0.09795749933,((t27:0.2384465737,t116:0.06319742976):0.5809531619,t11:0.7605523472):0.7684780476):0.5977018897,t42:0.5186913363):0.6690062198):0.106854849):0.9689472683,t173:0.2922951409):0.9050669076):0.9820969107):0.6604989544,t162:0.5863628879):0.3303067696);"

size = 1000   #1000 codons per alignment

freqaln = 'aln_aa_H1N1_HA.fasta'

hydir = 'HyPhyMaterials/'
#hyphy_exec = "/home/sjs3495/bin/bin/HYPHYMP"
hyphy_exec = "HYPHYMP"
#################################################################################################################################


############################################ CLUSTER-SPECIFIC FOR AN ARRAY JOB ##################################################
param = sys.argv[1]
rep = int(sys.argv[2])
if rep == 100:
	rep = 0

param_of_interest = 0
if param == "kappa":
	kappa = kappas[rep]
	omega = omega_fixed
	param_of_interest = kappa
elif param == "omega":
	kappa = kappa_fixed
	omega = omegas[rep]
	param_of_interest = omega
else:
	sys.exit("big fail! you have no param!")
assert(param_of_interest != 0), "Param not defined properly"



	
results_dir = "results/"
ensure_dir(results_dir)

param_dir = results_dir+"params/"
seq_dir = results_dir+"seqs/"
ensure_dir(param_dir)
ensure_dir(seq_dir)

name = param++str(rep)
seqfile = seq_dir+name+".fasta"
paramfile = param_dir+name+".txt"
#################################################################################################################################

# Convert tree to sim-usable format
my_tree = readTree(tree = tree_string)

# Collect state frequencies
fgen = ReadFreqs(by='amino', alnfile=freqaln) ## by needs to be the type of data in the file
freqs = fgen.getCodonFreqs()

# Build the model
print "building model"
partition = buildSingleModel(freqs, kappa, omega, size)
	
# Simulate
print "simulating"
callSim(partition, my_tree, "seq.fasta")

# Save sequences
shutil.copy("seq.fasta", seqfile)

# Copy sequences into hydir
shutil.copy("seq.fasta", hydir)
	
os.chdir(hydir)

# Call HyPhy
print "hyphying"
prepHyPhy("seq.fasta", tree_string)
hyparam = runHyPhy(hyphy_exec, param)

# Save param results
file = open("../"+paramfile, 'w')
file.write(str(param_of_interest)+'\t'+str(hyparam))
file.close()



















